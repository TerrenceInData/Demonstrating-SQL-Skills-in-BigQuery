/* In this demonstration, I uploaded this data set by manually creating the schema, editing it as text. My goal in this query is to show data transformation techniques and format this data correctly from one data type, into another. */

SELECT
purchase_price
FROM
customer_data.customer_purchase
ORDER BY purchase_price DESC

--After running an ORDER BY, DESC query, I can see that 89.85 shows up at the top with 799.99 below it. 799.99 is a bigger number than 89.85. The database may not be recognizing that they're numbers. It didn't sort them. I can see that purchase_price is not responding to Sorting commands. This means that the purchase_price column is likely not in correct format. It may be reading as text instead of numerical.

;

--I take a look at the schema to investigate further and notice, the database sees the wrong datatype for what purchase_price is. The database thinks purchase_price is a STRING, when it should be a FLOAT, so that it can recognize it as a number that contains a decimal.

--I will attempt to Typecast data into the correct format with the CAST function.

SELECT
CAST(purchase_price AS FLOAT64)
FROM
customer_data.customer_purchase
ORDER BY 
CAST(purchase_price AS FLOAT64) DESC

--Upon running this query, the column is now properly formatted and able to be sorted correctly.

;

--Next, I will write a SQL query that will pull date and purchase_price for all purchases that occurred between December 1st, 2020, and December 31st, 2020 to get an exemple on holiday sales info.

SELECT
date,
purchase_price
FROM
customer_data.customer_purchase
WHERE
date BETWEEN '2020-12-01' AND '2020-12-31'

--The query results return showing that the database is recognizing this date field as date and time instead of only date.

;

--I will write a query to covert the format to date only using the CAST function.

SELECT
CAST(date AS date) AS date_only,
purchase_price
FROM
customer_data.customer_purchase
WHERE
date BETWEEN '2020-12-01' AND '2020-12-31'

--Now, the results show date in the date only format, making this easier to understand for future analysis.

;

--Next, I'll try to find a way to separate products by color, so that I can tell if customers prefer one color over others.
I can use the CONCAT function to help me tell the products apart by color and count them more easily.

SELECT
CONCAT(product_code, product_color) AS new_product_code
FROM
customer_data.customer_purchase
WHERE
product='couch'

--After running the query, I can clearly see that grey is the most popular color appearing in the results 3 times.

;

--Next, I would like to get null values in the data table to return in a better format. Instead of saying, "null" I will
replace with relevant data value. I'll use the COALESCE Function to achieve this in the customer_purchase table and fill
missing rows of information.

SELECT
COALESCE(product, product_code) AS product_info
FROM
customer_data.customer_purchase

--By skipping null values, this gives me sufficient product information for each purchase. Now I've got a full list of all
products that were sold for the manager or stakeholders to review.

;



